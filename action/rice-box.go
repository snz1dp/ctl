// Code generated by rice embed-go; DO NOT EDIT.
package action

import (
	"time"

	"github.com/GeertJohan/go.rice/embedded"
)

func init() {

	// define files
	file2 := &embedded.EmbeddedFile{
		Filename:    "archetype-catalog.xml",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<archetype-catalog xsi:schemaLocation=\"http://maven.apache.org/plugins/maven-archetype-plugin/archetype-catalog/1.0.0 http://maven.apache.org/xsd/archetype-catalog-1.0.0.xsd\"\n    xmlns=\"http://maven.apache.org/plugins/maven-archetype-plugin/archetype-catalog/1.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <archetypes>\n    <archetype>\n      <groupId>com.snz1.archetype</groupId>\n      <artifactId>backend-archetype</artifactId>\n      <version>2.4.2</version>\n      <repository>https://snz1.cn/nexus/repository/maven-public/</repository>\n    </archetype>\n  </archetypes>\n</archetype-catalog>\n"),
	}
	file3 := &embedded.EmbeddedFile{
		Filename:    "base.yaml",
		FileModTime: time.Unix(1756612062, 0),

		Content: string("\nbanner: |+\n  .____            _ ____  ____  \n  / ___| _ __  ___/ |  _ \\|  _ \\ \n  \\___ \\| '_ \\|_  / | | | | |_) |\n   ___) | | | |/ /| | |_| |  __/ \n  |____/|_| |_/___|_|____/|_|    \n                             1.2\n   Snz1DP command line utility\n\nwebsite: https://alidocs.dingtalk.com/i/nodes/1DKw2zgV2vkxoOzgf1rDyzwwVB5r9YAn?utm_scene=team_space\n\nnewhint: |\n  ✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨\n  ✨ snz1dpctl have new version avaible!    ✨\n  ✨       👉  snz1dpctl upgrade  👈        ✨\n  ✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨✨\n\nsnz1dp:\n  server:\n    url: https://snz1.cn/develop/platform/api/configs\n    git: https://snz1.cn/gitrepo/\n\n  download:\n    env:\n      arg: SNZ1DP_DOWNLOAD_URL\n    default: https://snz1.cn/snz1dp/download/\n  ctl:\n    name: snz1dpctl\n    pinger: snz1.cn\n    url: https://snz1.cn/snz1dp/download/\n    home:\n      env:\n        arg: SNZ1DP_HOME\n      default: ~/.snz1dp\n  docker:\n    url: snz1.cn\n    secure: true\n  helm:\n    url: https://snz1.cn/nexus/repository/helm-hosted/\n    name: snz1dp-nexus\n    push: nexus-push\n    user_arg: -u\n    pwd_arg: -p\n  maven:\n    id: snz1\n    url: https://snz1.cn/nexus/repository/maven-public/\n    mirrors:\n    - id: aliyun\n      url: http://maven.aliyun.com/nexus/content/groups/public/\n      mirrorOf: central\n  npm:\n    private: false\n    id: npm\n    url: https://registry.npmjs.org/\n    sass-binary-site:\n      id: node-sass-site\n      url: https://cdn.npmmirror.com/binaries/node-sass/\n      private: false\n\n  k8s:\n    image:\n      prefix: https://github.com/AliyunContainerService/k8s-for-docker-desktop/raw/v\n      filename: images.properties\n\n  sonar:\n    url: https://snz1.cn/sonarqube/\n\nkubectl:\n  name: kubectl\n  url: https://snz1.cn/snz1dp/download/kubectl/v\n  version: \"1.18.0\"\n\nhaproxy:\n  image: k8s-deploy/haproxy\n  tag: v1.0\n  version: 1.0.0\n\nkeepalived:\n  image: k8s-deploy/keepalived\n  tag: v1.0\n  version: 1.0.0\n\nbuildx:\n  version: 0.11.2\n  prefix: https://snz1.cn/snz1dp/download/docker/\n\nmvw:\n  url: https://snz1.cn/snz1dp/download/mvnw-0.5.6.tgz\n  distribution_url: https://snz1.cn/snz1dp/download/apache-maven-3.6.3-bin.zip\n  wrapper_url: https://snz1.cn/snz1dp/download/maven-wrapper.jar\n\nhelm:\n  url: https://snz1.cn/snz1dp/download/helm/\n  name: helm\n  version: v3.12.0\n  suffix: tgz\n  plugin: dp/tool/helm-nexus-push.git\n  windows-plugin: dp/tool/windows-helm-nexus-push.git\n\narchetype:\n  version: \"2.4.3\"\n  group: com.snz1.archetype\n  artifact: backend-archetype\n  url: https://snz1.cn/snz1dp/download/backend-archetype-2.4.3-SNAPSHOT.jar\n\nvueproject:\n  url: https://snz1.cn/snz1dp/download/vue-element-ui-demo-1.0.0.tgz\n\nnode:\n  name: node\n  url: https://snz1.cn/snz1dp/download/nodejs/\n  version: \"16.20.2\"\n  suffix: tgz\n\nsonar:\n  url: https://snz1.cn/snz1dp/download/sonar-scanner/\n  name: sonar-scanner\n  version: 4.4.0.2170\n  suffix: tgz\n\nrunner:\n  docker:\n    image: snz1dp/runner:1.0.0\n\nnvm:\n  name: \"nvm\"\n  version: 0.39.7\n  windows:\n    version: 1.1.12\n    suffix: tgz\n"),
	}
	file4 := &embedded.EmbeddedFile{
		Filename:    "global.yaml",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("\n# kubernetes\nkubernetes:\n  config: ~/.kube/config # kubectl file path, ~/ is user home\n  context: \"\" # default kubernetes context in config\n  storageclass: hostpath # use kubectl get storageclass\n\n# Snz1Dp\nsnz1dp:\n  version: 1.2.19\n  namespace: snz1dp-system # snz1dp install namespace\n  # snz1dp ingress configuration\n  ingress:\n    host: localhost # domain host or ip of ingress\n    protocol: http # protocol of protocol(http,https)\n  timezone: Asia/Shanghai # default timezone\n  organization: \"ChangSha SNZ1\" # name of group\n  admin:\n    username: root\n    email: root@localhost.com\n    password: 123456\n\n# postgres\npostgres:\n  version: \"14.10\"\n  install: false\n  admin:\n    username: postgres\n    password: snz1dp9527\n  host: postgres\n  port: 5432\n\n# redis\nredis:\n  version: 6.2.5\n  install: false\n  password: snz1dp9527\n  host: redis\n  port: 6379\n\n# appgateway ingress\nappgateway:\n  install: false\n  version: 2.8.4\n  admin:\n    host: ingress\n    port: 91\n  web:\n    host: ingress\n    port: 80\n    protocol: http\n\n# configserv\nconfserv:\n  install: false\n  version: 2.2.3\n  web:\n    host: confserv\n    port: 80\n    protocol: http\n    webroot: /appconfig\n\n# xeai\nxeai:\n  install: false\n  version: 2.6.8\n  web:\n    host: xeai\n    port: 80\n    protocol: http\n    webroot: /xeai\n"),
	}
	file5 := &embedded.EmbeddedFile{
		Filename:    "haproxy.yaml",
		FileModTime: time.Unix(1756132954, 0),

		Content: string("\nname: snz1dp-haproxy\nmaxconn: 8192\nulimit: 819200\nmode: http\nbalance: source # roundrobin,source\nstats:\n  port: 8081\n  uri: /haproxy/stats\n"),
	}
	file6 := &embedded.EmbeddedFile{
		Filename:    "keepalived.yaml",
		FileModTime: time.Unix(1756132954, 0),

		Content: string("name: \"snz1dp-keepalived\"\nrouter_id: \"snz1dp-appgateway\"\nvrrp_check:\n  interval: 3\n  fall: 3\n  port: 0\n  rise: 2\n  timeout: 3\nvrrp_garp_master_delay: 3\nvrrp_mcast_group4: \"224.0.0.18\"\nvrrp_version: 2\n"),
	}

	// define dirs
	dir1 := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1756132973, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file2, // "archetype-catalog.xml"
			file3, // "base.yaml"
			file4, // "global.yaml"
			file5, // "haproxy.yaml"
			file6, // "keepalived.yaml"

		},
	}

	// link ChildDirs
	dir1.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`../asset/config`, &embedded.EmbeddedBox{
		Name: `../asset/config`,
		Time: time.Unix(1756132973, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"": dir1,
		},
		Files: map[string]*embedded.EmbeddedFile{
			"archetype-catalog.xml": file2,
			"base.yaml":             file3,
			"global.yaml":           file4,
			"haproxy.yaml":          file5,
			"keepalived.yaml":       file6,
		},
	})
}

func init() {

	// define files
	file8 := &embedded.EmbeddedFile{
		Filename:    "check-svc-alived.sh",
		FileModTime: time.Unix(1756132954, 0),

		Content: string("#!/bin/bash\n\nnc -v -w 2 -z {{ .VRRPCheck.IP }} {{ .VRRPCheck.Port }} 2>&1 | grep open | grep {{ .VRRPCheck.Port }} >/dev/null 2>&1\nexit $?\n"),
	}
	file9 := &embedded.EmbeddedFile{
		Filename:    "haproxy.cfg",
		FileModTime: time.Unix(1756132954, 0),

		Content: string("\nglobal\n\nlog 127.0.0.1 local0\nlog 127.0.0.1 local1 notice\n\nmaxconn {{ .Maxconn }}\nulimit-n {{ .Ulimit }}\ndaemon\n\ndefaults\n    log     global\n    mode    http\n    option  httplog\n    option  dontlognull\n    option  redispatch\n    option  httpchk\n    retries 3\n    timeout connect  6000\n    timeout client  60000\n    timeout server  60000\n    balance source\n\nfrontend stats-front\n  bind *:{{ .Stats.Port }}\n  mode http\n  default_backend stats-back\n\nbackend stats-back\n  mode {{ .Mode }}\n  balance {{ .Balance }}\n  stats uri {{ .Stats.URI }}\n  {{- if .Stats.Auth.Password }}\n  stats auth {{ .Stats.Auth.Username }}:{{ .Stats.Auth.Password }}\n  {{- end }}\n\n{{- if .Services }}\n{{- range .Services }}\n\nfrontend fe_{{ .Name }}_{{ .Port }}\n  bind *:{{ .Port }} {{- if .AccessProxy }} accept-proxy {{- end }}\n  mode {{ .Mode }}\n  timeout client 30m\n  log global\n  default_backend be_{{ .Name }}_{{ .Port }}\n  {{- if eq .Mode \"http\" }}\n  option  forwardfor\n  option  originalto\n  acl is_websocket hdr(Upgrade) -i WebSocket\n  acl is_websocket hdr_beg(Host) -i ws\n  {{- else }}\n  option tcplog\n  {{- end }}\n\nbackend be_{{ .Name }}_{{ .Port }}\n  mode {{ .Mode }}\n  timeout queue 1h\n  timeout server 1h\n  timeout connect 1h\n\n  {{- if eq .Mode \"http\" }}\n  option  httpchk\n  {{- end }}\n\n  log global\n  balance {{ .Balance }}\n\n  {{- range .Backends }}\n  server {{ .Name }} {{ .IP }}:{{ .Port }} check {{- if .SendProxy }} send-proxy {{- end }} inter {{ .Inter }} rise {{ .Rise }} fall {{ .Fall }} weight {{ .Weight }}\n  {{- end }}\n\n{{- end }}\n{{- end }}\n"),
	}
	filea := &embedded.EmbeddedFile{
		Filename:    "info.tpl",
		FileModTime: time.Unix(1756132954, 0),

		Content: string("\n======================================================================\n\nsnz1dp version       : {{ .Snz1dp.Version }}\nsnz1dp namespace     : {{ .Snz1dp.Namespace }}\nsnz1dp web protocol  : {{ .Snz1dp.Ingress.Protocol }}\nsnz1dp web host      : {{ .Snz1dp.Ingress.Host }}\nsnz1dp web port      : {{ .Snz1dp.Ingress.Port }}\n\nsnz1dp repo protocol : {{ .Snz1dp.Ingress.Docker.Repo.Protocol }}\nsnz1dp repo host     : {{ .Snz1dp.Ingress.Docker.Repo.Host }}\nsnz1dp repo port     : {{ .Snz1dp.Ingress.Docker.Repo.Port }}\n\nappgateway version   : {{ .Appgateway.Version }}\nxeai version         : {{ .Xeai.Version }}\nconfserv version     : {{ .Confserv.Version }}\n\nxeai  web root       : /xeai\nconfserv web root    : /appconfig\n\nadmin username       : {{ .Snz1dp.Admin.Username }}\nadmin password       : {{ .Snz1dp.Admin.Password }}\n\n======================================================================\n\nistio installed      : {{ .Istio.Install }}\nistio version        : {{ .Istio.Version }}\nistio namespace      : {{ .Istio.Namespace }}\n\n======================================================================\n\nredis installed      : {{ .Redis.Install }}\nredis version        : {{ .Redis.Version }}\n{{- if not .Redis.Install }}\nredis host           : {{ .Redis.Host }}\nredis port           : {{ .Redis.Port }}\n{{- end }}\nredis password       : {{ .Redis.Password }}\n\npostgres installed   : {{ .Postgres.Install }}\npostgres version     : {{ .Postgres.Version }}\n{{- if not .Postgres.Install }}\npostgres host        : {{ .Postgres.Host }}\npostgres port        : {{ .Postgres.Port }}\n{{- end }}\npostgres username    : {{ .Postgres.Admin.Username }}\npostgres password    : {{ .Postgres.Admin.Password }}\n\nactivemq installed   : {{ .ActiveMQ.Install }}\nactivemq version     : {{ .ActiveMQ.Version }}\n{{- if not .ActiveMQ.Install }}\nactivemq host        : {{ .ActiveMQ.Host }}\n{{- end }}\nopenwire port        : {{ .ActiveMQ.WIRE.Port }}\nmqtt port            : {{ .ActiveMQ.MQTT.Port }}\nstomp port           : {{ .ActiveMQ.STOMP.Port }}\namqp port            : {{ .ActiveMQ.AMQP.Port }}\nconsole port         : {{ .ActiveMQ.Console.Port }}\nconsole web root     : {{ .ActiveMQ.Console.Webroot }}\nadmin username       : {{ .ActiveMQ.Admin.Username }}\nadmin password       : {{ .ActiveMQ.Admin.Password }}\n\ninfluxdb installed   : {{ .InfluxDB.Install }}\ninfluxdb version     : {{ .InfluxDB.Version }}\n{{- if not .InfluxDB.Install }}\ninfluxdb host        : {{ .InfluxDB.Host }}\ninfluxdb port        : {{ .InfluxDB.Port }}\n{{- end }}\ndatabase name        : {{ .InfluxDB.DatabaseName }}\n======================================================================\n\nopenldap version     : {{ .Openldap.Version }}\nopenldap installed   : {{ .Openldap.Install }}\n{{- if not .Openldap.Install }}\nopenldap protocol    : {{ .Openldap.Protocol }}\nopenldap host        : {{ .Openldap.Host }}\nopenldap port        : {{ .Openldap.Port }}\n{{- end }}\nopenldap domain      : {{ .Openldap.Domain }}\nopenldap admin dn    : {{ .Openldap.Admin.Username }}\nadmin password       : {{ .Openldap.Admin.Password }}\nopenldap config dn   : {{ .Openldap.Config.Username }}\nconfig password      : {{ .Openldap.Config.Password }}\n\n======================================================================\n\ngitlab version       : {{ .Gitlab.Version }}\ngitlab installed     : {{ .Gitlab.Install }}\n{{- if not .Gitlab.Install  }}\ngitlab protocol      : {{ .Gitlab.Web.Protocol }}\ngitlab host          : {{ .Gitlab.Web.Host }}\ngitlab port          : {{ .Gitlab.Web.Port }}\n{{- end }}\ngitlab web root      : {{ .Gitlab.Web.Webroot }}\n\njenkins version      : {{ .Jenkins.Version }}\njenkins installed    : {{ .Jenkins.Install }}\n{{- if not .Jenkins.Install }}\njenkins protocol     : {{ .Jenkins.Web.Protocol }}\njenkins host         : {{ .Jenkins.Web.Host }}\njenkins port         : {{ .Jenkins.Web.Port }}\n{{- end }}\njenkins web root     : {{ .Jenkins.Web.Webroot }}\n\nnexus version        : {{ .Nexus.Version }}\nnexus installed      : {{ .Nexus.Install }}\n{{- if not .Nexus.Install }}\nnexus web protocol   : {{ .Nexus.Web.Protocol }}\nnexus web host       : {{ .Nexus.Web.Host }}\nnexus web port       : {{ .Nexus.Web.Port }}\n{{- end }}\n{{- if not .Nexus.Install }}\nnexus web root       : {{ .Nexus.Web.Webroot }}\ndocker repo protocol : {{ .Nexus.Repo.Protocol }}\ndocker repo host     : {{ .Nexus.Repo.Host }}\ndocker repo port     : {{ .Nexus.Repo.Port }}\n{{- end }}\n\n======================================================================\n\nfilerepo version     : {{ .Filerepo.Version }}\nfilerepo install     : {{ .Filerepo.Install }}\n{{- if .Filerepo.Install }}\nfilerepo web root    : /filerepo\n{{- end}}\n\njobmgr version       : {{ .Jobmgr.Version }}\njobmgr install       : {{ .Jobmgr.Install }}\n{{- if .Jobmgr.Install }}\njobmgr web root      : /jobmgr\n{{- end}}\n\n======================================================================\n\n\n{{- if .OldGateway.Install  }}\noldgateway version   : {{ .OldGateway.Version }}\n{{- end }}\n{{- if .Logserv.Install  }}\nlogserv version      : {{ .Logserv.Version }}\n{{- end }}\n{{- if .Monitor.Install  }}\nmonitor version      : {{ .Monitor.Version }}\n{{- end }}\n"),
	}
	fileb := &embedded.EmbeddedFile{
		Filename:    "keepalived.conf",
		FileModTime: time.Unix(1756132954, 0),

		Content: string("global_defs {\n\n    router_id {{ .RouteID }}\n    vrrp_version {{ .VRRPVersion }}\n    vrrp_garp_master_delay {{ .VRRPGarpMasterDelay }}\n    vrrp_mcast_group4 {{ .VRRPMcastGroup4 }}\n\n}\n\nvrrp_script chk_svc_alived {\n\n    script       \"/etc/keepalived/check-svc-alived.sh\"\n    timeout      {{ .VRRPCheck.Timeout }}\n    interval     {{ .VRRPCheck.Interval }}\n    fall 3       {{ .VRRPCheck.Fall }}\n    rise 2       {{ .VRRPCheck.Rise }}\n\n}\n\n{{- range .VirtualInstances }}\n\nvrrp_instance {{ .Name }} {\n\n    state {{ .State }}\n    interface {{ .Interface }}\n    virtual_router_id {{ .VirtualRouterID }}\n    priority {{ .Priority }}\n    advert_int {{ .AdvertInterval }}\n\n    track_script {\n        chk_svc_alived\n    }\n\n    authentication {\n        auth_type PASS\n        auth_pass {{ .AuthPass }}\n    }\n\n    virtual_ipaddress {\n        {{ .VirtualIP }}/{{ .Subnet }} dev {{ .Interface }}\n    }\n}\n\n{{- end }}\n"),
	}
	filec := &embedded.EmbeddedFile{
		Filename:    "version.tpl",
		FileModTime: time.Unix(1756132954, 0),

		Content: string("snz1dp version     : {{ .Snz1dp.Version }}\nappgateway version : {{ .Appgateway.Version }}\nxeai version       : {{ .Xeai.Version }}\nconfserv version   : {{ .Confserv.Version }}\n{{- if .Istio.Install }}\nistio version      : {{ .Istio.Version }}\n{{- end }}\n{{- if .Redis.Install }}\nredis version      : {{ .Redis.Version }}\n{{- end }}\n{{- if .ActiveMQ.Install }}\nactivemq version   : {{ .ActiveMQ.Version }}\n{{- end }}\n{{- if .InfluxDB.Install }}\ninfluxdb version   : {{ .InfluxDB.Version }}\n{{- end }}\n{{- if .Postgres.Install }}\npostgres version   : {{ .Postgres.Version }}\n{{- end }}\n{{- if .Openldap.Install }}\nopenldap version   : {{ .Openldap.Version }}\n{{- end }}\n{{- if .Gitlab.Install  }}\ngitlab version     : {{ .Gitlab.Version }}\n{{- end }}\n{{- if .Jenkins.Install }}\njenkins version    : {{ .Jenkins.Version }}\n{{- end }}\n{{- if .Nexus.Install }}\nnexus version      : {{ .Nexus.Version }}\n{{- end }}\n{{- if .Filerepo.Install }}\nfilerepo version   : {{ .Filerepo.Version }}\n{{- end}}\n{{- if .Jobmgr.Install }}\njobmgr version     : {{ .Jobmgr.Version }}\n{{- end}}\n{{- if .OldGateway.Install }}\noldgateway version : {{ .OldGateway.Version }}\n{{- end}}\n{{- if .Logserv.Install }}\nlogserv version    : {{ .Logserv.Version }}\n{{- end}}\n{{- if .Monitor.Install  }}\nmonitor version    : {{ .Monitor.Version }}\n{{- end }}\n"),
	}

	// define dirs
	dir7 := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1756132954, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file8, // "check-svc-alived.sh"
			file9, // "haproxy.cfg"
			filea, // "info.tpl"
			fileb, // "keepalived.conf"
			filec, // "version.tpl"

		},
	}

	// link ChildDirs
	dir7.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`template`, &embedded.EmbeddedBox{
		Name: `template`,
		Time: time.Unix(1756132954, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"": dir7,
		},
		Files: map[string]*embedded.EmbeddedFile{
			"check-svc-alived.sh": file8,
			"haproxy.cfg":         file9,
			"info.tpl":            filea,
			"keepalived.conf":     fileb,
			"version.tpl":         filec,
		},
	})
}

func init() {

	// define files
	filee := &embedded.EmbeddedFile{
		Filename:    ".gitignore",
		FileModTime: time.Unix(1756132973, 0),

		Content: string(".DS_Store\n*.swp\n/target\n/.settings\n/.project\n/.classpath\n/src/main/webapp/WEB-INF/lib\n/src/main/webapp/WEB-INF/classes\n*.pdb\n/tomcat\n/bin\n/.factorypath\n/.vscode\n*.log\n*.tgz\n*.tar.gz\n*.zip\n*.7z\n*.tree\n*.$*\n*.oob\nout/"),
	}
	filef := &embedded.EmbeddedFile{
		Filename:    ".java-version",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("1.8"),
	}
	fileh := &embedded.EmbeddedFile{
		Filename:    ".workflow/build.sh",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("#!/bin/bash\n\nOS=$(uname|tr '[:upper:]' '[:lower:]')\nHARDWARE=arm64\nif [ \"$(uname -m)\" == \"x86_64\" ]; then\n  HARDWARE=amd64\nfi\n\nWORKSPACE=${WORKSPACE:-$PWD}\n\ncd $WORKSPACE\n\n# Download ctl\nmkdir -p $WORKSPACE/.snz1dp/bin\nwget -O $WORKSPACE/.snz1dp/bin/snz1dpctl \\\n  {{ .DownloadURL }}snz1dpctl-$OS-$HARDWARE\nchmod +x $WORKSPACE/.snz1dp/bin/snz1dpctl\n\nexport SNZ1DP_HOME=$WORKSPACE/.snz1dp\nexport PATH=$PATH:$SNZ1DP_HOME/bin\n\nsnz1dpctl profile login {{ .ServerURL }} --username \"$DPCTL_USERNAME\" --password  \"$DPCTL_PASSWORD\"\nsnz1dpctl make build\n"),
	}
	filei := &embedded.EmbeddedFile{
		Filename:    ".workflow/deploy.sh",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("#!/bin/bash\n\nWORKSPACE=${WORKSPACE:-$PWD}\nDEPLOY_NAMESPACE=${DEPLOY_NAMESPACE:-demo}\nPULL_IMAGE_SECRET=${PULL_IMAGE_SECRET:-pull-image-secret}\n\n# TODO: 请设置配置参数\nJWT_TOKEN=${JWT_TOKEN:-}\nJWT_PRIVKEY=${JWT_PRIVKEY:-}\nJDBC_URL=${JDBC_URL:-jdbc:postgresql://postgres:5432/demo}\nJDBC_USER=${JDBC_USER:-postgres}\nJDBC_PASSWORD=${JDBC_PASSWORD:-}\nREDIS_SERVER=${REDIS_SERVER:-redis:6379}\nREDIS_PASSWORD=${REDIS_PASSWORD:-snz1dp9527}\nREDIS_DB=${REDIS_DB:-6}\nCONFIG_URL=${CONFIG_URL:-http://confserv/appconfig}\nXEAI_URL=${XEAI_URL:-http://xeai/xeai}\nINITIAL_USERNAME=${INITIAL_USERNAME:-root}\nINITIAL_PASSWORD=${INITIAL_PASSWORD:-123456}\n\ncd $WORKSPACE\nexport SNZ1DP_HOME=$WORKSPACE/.snz1dp\nexport PATH=$PATH:$SNZ1DP_HOME/bin\n\nDEPLOY_RELEASE_NAME=$(snz1dpctl make info)\nCHART_NAME_VERSION=$(snz1dpctl make info --version)\n\n${WORKSPACE}/.snz1dp/bin/snz1dpctl helm template \\\n  -n ${DEPLOY_NAMESPACE} \\\n  --skip-tests \\\n  --set \"imagePullSecrets[0].name=${PULL_IMAGE_SECRET}\" \\\n  --set \"env.CONFIG_PROFILE=prod\" \\\n  --set \"env.JWT_TOKEN=${JWT_TOKEN}\" \\\n  --set \"env.JWT_PRIVKEY=\" \\\n  --set \"env.JDBC_URL=${JDBC_URL}\" \\\n  --set \"env.JDBC_USER=${JDBC_USER}\" \\\n  --set \"env.JDBC_PASSWORD=${JDBC_PASSWORD}\" \\\n  --set \"env.REDIS_SERVER=${REDIS_SERVER}\" \\\n  --set \"env.REDIS_PASSWORD=${REDIS_PASSWORD}\" \\\n  --set \"env.REDIS_DB=${REDIS_DB}\" \\\n  --set \"env.CONFIG_URL=${CONFIG_URL}\" \\\n  --set \"env.XEAI_URL=${XEAI_URL}\" \\\n  --set \"env.INITIAL_USERNAME=${INITIAL_USERNAME}\" \\\n  --set \"env.INITIAL_PASSWORD=${INITIAL_PASSWORD}\" \\\n  ${DEPLOY_RELEASE_NAME} \\\n  out/${CHART_NAME_VERSION}.tgz>${WORKSPACE}/deploy.yaml\n\nenvsubst < ${WORKSPACE}/deploy.yaml | kubectl -n ${DEPLOY_NAMESPACE} apply -f -\n"),
	}
	filej := &embedded.EmbeddedFile{
		Filename:    ".workflow/publish.sh",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("#!/bin/bash\n\nWORKSPACE=${WORKSPACE:-$PWD}\ncd $WORKSPACE\nexport SNZ1DP_HOME=$WORKSPACE/.snz1dp\nexport PATH=$PATH:$SNZ1DP_HOME/bin\n\nsnz1dpctl make publish\n"),
	}
	filek := &embedded.EmbeddedFile{
		Filename:    "BUILD.yaml",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("# 编译类型\ntype: maven\n\n# 名称\nname: {{ .Name }}\ndesciption: 应用标题\n\n# 镜像编译参数\ndocker:\n  # 镜像名称\n  image: {{ .DockerHub }}{{ .Name }}\n  # 镜像编译文件(默认：Dockerfile)\n  file: Dockerfile\n\n# 服务定义\nservice:\n\n  # 端口定义\n  ports:\n  - 9081:80\n\n  # 环境变量\n  envs:\n  # 默认使用生产配置文件\n  - CONFIG_PROFILE=prod\n  # JWT访问令牌\n  - JWT_TOKEN=\"[[{ .Snz1dp.Jwt.Token }]]\"\n  # JWT应用私钥\n  - JWT_PRIVKEY=\"[[{ .Snz1dp.Jwt.PrivateKey }]]\"\n  # JDBC驱动类型\n  - JDBC_DRIVER=\"org.postgresql.Driver\"\n  # JDBC访问地址\n  - JDBC_URL=\"jdbc:postgresql://[[{ .Postgres.Host }]]:[[{ .Postgres.Port }]]/demo\"\n  # JDBC用户名\n  - JDBC_USER=\"[[{ .Postgres.Admin.Username }]]\"\n  # JDBC用户密码\n  - JDBC_PASSWORD=\"[[{ .Postgres.Admin.Password }]]\"\n  # 缓存类型：redis、ehcache、none\n  - CACHE_TYPE=redis\n  # REDIS密码\n  - REDIS_PASSWORD=\"[[{ .Redis.Password }]]\"\n  # REDIS主机及端口\n  - REDIS_SERVER=\"[[{ .Redis.Host }]]:[[{ .Redis.Port }]]\"\n  # REDIS数据库索引\n  - REDIS_DB=6\n  # 默认初始化用户\n  - INITIAL_USERNAME=\"[[{ .Snz1dp.Admin.Username }]]\"\n  # 默认初始化密码\n  - INITIAL_PASSWORD=\"[[{ .Snz1dp.Admin.Password }]]\"\n  # 动态配置类型：cluster（集群）、cache(缓存)、none（无）\n  - CONFIG_TYPE=cluster\n  # 动态配置服务地址\n  - CONFIG_URL=\"[[{ .Confserv.Web.Protocol }]]://[[{ .Confserv.Web.Host }]]:[[{ .Confserv.Web.Port }]][[{ .Confserv.Web.Webroot }]]\"\n  # 组织用户服务地址\n  - XEAI_URL=\"[[{ .Xeai.Web.Protocol }]]://[[{ .Xeai.Web.Host }]]:[[{ .Xeai.Web.Port }]][[{ .Xeai.Web.Webroot }]]\"\n\n  # 心跳检查\n  healthcheck:\n    url: /{{ .Name }}/api/health\n    interval: 60s\n    timeout: 6s\n    period: 30s\n    retries: 30\n\n  # 路由定义\n  ingress:\n  - backend-port: 80\n    strip-path: false\n    preserve-host: true\n    sso:\n    - /{{ .Name }}/api\n    - /{{ .Name }}/api/health\n    - /{{ .Name }}/api/version\n    - /{{ .Name }}/api/v3\n    - /{{ .Name }}/api/swagger-ui\n    - /{{ .Name }}/api/swagger-resources\n    - /{{ .Name }}/api/webjars\n\n  # 内置文件\n  # files:\n  #   test.sh: |\n  #     #!/bin/bash\n  #     echo \"test\"\n\n  # 卷组挂载\n  # volumes:\n  #   - test.sh:/test/app/test.sh\n  #   - data:/app/data\n\n# 开发配置\ndevelop:\n  # 开发运行时依赖配置\n  config: |\n    # values:\n    #   ...\n    postgres:\n      admin:\n        username: postgres\n        password: snz1dp9527\n      host: postgres\n      install: true\n      port: 5432\n      version: \"14.10\"\n    redis:\n      password: snz1dp9527\n      host: redis\n      install: true\n      port: 6379\n      version: 6.2.5\n    appgateway:\n      admin:\n        host: ingress\n        port: 91\n        protocol: http\n      install: true\n      version: 2.8.4\n      web:\n        host: ingress\n        port: 80\n        protocol: http\n    confserv:\n      install: true\n      version: 2.2.3\n      web:\n        host: confserv\n        port: 80\n        protocol: http\n        webroot: /appconfig\n    xeai:\n      install: true\n      version: 2.6.8\n      web:\n        host: xeai\n        port: 80\n    snz1dp:\n      admin:\n        username: root\n        email: root@localhost.com\n        password: 123456\n      ingress:\n        host: localhost\n        port: 80\n        protocol: http\n      timezone: Asia/Shanghai\n"),
	}
	filel := &embedded.EmbeddedFile{
		Filename:    "Dockerfile",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("# 引入openjdk8镜像\nFROM {{ .DockerHub }}snz1dp/openjdk8-springboot-app:2.1\n\n# 复制打包好的jar文件到/app目录\nCOPY target/{{ .Name }}.jar /app/app.jar\n"),
	}
	filem := &embedded.EmbeddedFile{
		Filename:    "Jenkinsfile",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("pipeline {\n  agent {\n    node {\n      label \"maven\"\n    }\n  }\n  parameters {\n    string(name: 'REPO_SECRET', defaultValue: 'nexus-id', description: '发布仓库密钥')\n    string(name: 'K8S_SECRET', defaultValue: 'k8s-id', description: 'K8s部署密钥')\n    string(name: 'K8S_NAMESPACE', defaultValue: 'test', description: 'K8s部署名字空间/项目')\n    string(name: 'K8S_PULLIMAGE_SECRET', defaultValue: 'pull-image-secret', description: 'K8s拉取镜像密钥名称')\n    string(name: 'JWT_TOKEN', defaultValue: '', description: 'API授权令牌')\n    string(name: 'JWT_PRIVKEY', defaultValue: '', description: 'API访问私钥')\n    string(name: 'JDBC_URL', defaultValue: 'jdbc:postgresql://postgres:5432/demo', description: 'JDBC连接地址')\n    string(name: 'JDBC_USER', defaultValue: 'postgres', description: 'JDBC访问用户')\n    string(name: 'JDBC_PASSWORD', defaultValue: 'snz1dp9527', description: 'JDBC访问密码')\n    string(name: 'REDIS_SERVER', defaultValue: 'redis:6379', description: 'REDIS服务地址')\n    string(name: 'REDIS_PASSWORD', defaultValue: 'snz1dp9527', description: 'REDIS访问密码')\n    string(name: 'REDIS_DB', defaultValue: '6', description: 'REDIS数据库索引')\n    string(name: 'CONFIG_URL', defaultValue: 'http://confserv/appconfig', description: '动态配置服务URL地址')\n    string(name: 'XEAI_URL', defaultValue: 'http://xeai/xeai', description: '认证服务URL地址')\n    string(name: 'INITIAL_USERNAME', defaultValue: 'root', description: '初始化用户名')\n    string(name: 'INITIAL_PASSWORD', defaultValue: '123456', description: '初始化用户密码')\n  }\n  environment {\n    REPO_SECRET = \"${params.REPO_SECRET}\"\n    KUBECONFIG_CREDENTIAL_ID = \"${params.K8S_SECRET}\"\n    DEPLOY_NAMESPACE = \"${params.K8S_NAMESPACE}\"\n    PULL_IMAGE_SECRET = \"${params.K8S_PULLIMAGE_SECRET}\"\n    JWT_TOKEN = \"${params.JWT_TOKEN}\"\n    JWT_PRIVKEY = \"${params.JWT_PRIVKEY}\"\n    JDBC_URL = \"${params.JDBC_URL}\"\n    JDBC_USER = \"${params.JDBC_USER}\"\n    JDBC_PASSWORD = \"${params.JDBC_PASSWORD}\"\n    REDIS_SERVER = \"${params.REDIS_SERVER}\"\n    REDIS_PASSWORD = \"${params.REDIS_PASSWORD}\"\n    REDIS_DB = \"${params.REDIS_DB}\"\n    CONFIG_URL = \"${params.CONFIG_URL}\"\n    XEAI_URL = \"${params.XEAI_URL}\"\n    INITIAL_USERNAME = \"${params.INITIAL_USERNAME}\"\n    INITIAL_PASSWORD = \"${params.INITIAL_PASSWORD}\"\n  }\n  stages {\n    stage('Build') {\n      steps {\n        container ('maven') {\n          withCredentials([usernamePassword(passwordVariable: 'DPCTL_PASSWORD', usernameVariable: 'DPCTL_USERNAME' , credentialsId : \"$REPO_SECRET\" ,)]) {\n            sh 'chmod +x ${WORKSPACE}/.workflow/build.sh && ${WORKSPACE}/.workflow/build.sh'\n          }\n        }\n      }\n    }\n    stage('Publish') {\n      steps {\n        container ('maven') {\n          sh 'chmod +x ${WORKSPACE}/.workflow/publish.sh && ${WORKSPACE}/.workflow/publish.sh'\n        }\n      }\n    }\n    stage('Deploy') {\n      steps {\n        container ('maven') {\n          input(id: 'deploy-to-k8s', message: 'deploy-to-k8s?')\n          withCredentials([kubeconfigFile(credentialsId : \"$KUBECONFIG_CREDENTIAL_ID\" ,variable : \"KUBECONFIG\" ,)]) {\n            sh 'chmod +x ${WORKSPACE}/.workflow/deploy.sh && ${WORKSPACE}/.workflow/deploy.sh'\n          }\n        }\n      }\n    }\n  }\n}"),
	}
	filen := &embedded.EmbeddedFile{
		Filename:    "README.md",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("# Java后端\n\nTODO: 请补充说明\n\n## 开发调试\n\n> 首次使用请运行`snz1dpctl profile login {{ .ServerURL }}`命令登录开发平台。\n\n执行以下命令准备好依赖环境：\n\n```bash\nmake develop\n```\n\n> `windows`下或无安装`make`命令的机器上执行：\n\n```cmd\nsnz1dpctl make standalone develop\n```\n\n然后在`IDE`中启动`{{ .Package }}.Application`类进行调试。\n\n> 命令行运行服务程序：\n\n```bash\nsnz1dpctl make run\n```\n\n> 命令行运行单元测试:\n\n```bash\nsnz1dpctl make test\n```\n\n> 执行以下命令打包发布：\n\n```bash\nsnz1dpctl make publish\n```\n"),
	}
	fileo := &embedded.EmbeddedFile{
		Filename:    "VERSION",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("{{ .Version }}"),
	}
	filep := &embedded.EmbeddedFile{
		Filename:    "pom.xml",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project>\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>{{ .Group }}</groupId>\n\t<artifactId>{{ .Name }}</artifactId>\n\t<packaging>jar</packaging>\n\t<version>{{ .Version }}-SNAPSHOT</version>\n\t<url>http://maven.apache.org</url>\n\n\t<parent>\n\t\t<groupId>com.snz1</groupId>\n\t\t<artifactId>spring-boot2-app</artifactId>\n\t\t<version>2.4.3</version>\n\t</parent>\n\n\t<properties>\n\t\t<maven.compiler.source>1.8</maven.compiler.source>\n\t\t<maven.compiler.target>1.8</maven.compiler.target>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n\t\t<maven.compiler.encoding>UTF-8</maven.compiler.encoding>\n\t\t<jdbcrest.version>1.0.3-SNAPSHOT</jdbcrest.version>\n\t\t<junit5.version>5.9.3</junit5.version>\n\t\t<start-class>${package}.Application</start-class>\n\t</properties>\n\n\t<dependencies>\n\n\t\t<!-- Junit4 -->\n\t\t<dependency>\n\t\t\t<groupId>junit</groupId>\n\t\t\t<artifactId>junit</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\t\t<!-- Junit5 -->\n    <dependency>\n\t\t\t<groupId>org.junit.vintage</groupId>\n\t\t\t<artifactId>junit-vintage-engine</artifactId>\n\t\t\t<version>${junit5.version}</version>\n\t\t\t<scope>test</scope>\n    </dependency>\n\n\t\t<!-- SpringBootTest -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\n\t\t<!-- CommonsLang3 -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t<artifactId>commons-lang3</artifactId>\n\t\t</dependency>\n\n\t\t<!-- CommonsMatch3 -->\n\t\t<dependency>\n\t\t\t<groupId>org.apache.commons</groupId>\n\t\t\t<artifactId>commons-math3</artifactId>\n\t\t</dependency>\n\n\t\t<!-- CommonsIO -->\n\t\t<dependency>\n\t\t\t<groupId>commons-io</groupId>\n\t\t\t<artifactId>commons-io</artifactId>\n\t\t</dependency>\n\n\t\t<!-- CommonsCodec -->\n\t\t<dependency>\n\t\t\t<groupId>commons-codec</groupId>\n\t\t\t<artifactId>commons-codec</artifactId>\n\t\t</dependency>\n\n\t\t<!-- CommonsCollections -->\n\t\t<dependency>\n\t\t\t<groupId>commons-collections</groupId>\n\t\t\t<artifactId>commons-collections</artifactId>\n\t\t</dependency>\n\n\t\t<!-- BeanUtils -->\n\t\t<dependency>\n\t\t\t<groupId>commons-beanutils</groupId>\n\t\t\t<artifactId>commons-beanutils</artifactId>\n\t\t</dependency>\n\n\t\t<!-- aspectjweaver -->\n\t\t<dependency>\n\t\t\t<groupId>org.aspectj</groupId>\n\t\t\t<artifactId>aspectjweaver</artifactId>\n\t\t</dependency>\n\n\t\t<!-- FreeMarker -->\n\t\t<dependency>\n\t\t\t<groupId>org.freemarker</groupId>\n\t\t\t<artifactId>freemarker</artifactId>\n\t\t</dependency>\n\n\t\t<!-- GSON -->\n\t\t<dependency>\n\t\t\t<groupId>com.google.code.gson</groupId>\n\t\t\t<artifactId>gson</artifactId>\n\t\t</dependency>\n\n\t\t<!-- Web支持 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n\t\t<!-- 健康检测 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\n\t\t</dependency>\n\n\t\t<!-- Mybatis -->\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t<artifactId>lombok</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.session</groupId>\n\t\t\t<artifactId>spring-session-core</artifactId>\n\t\t</dependency>\n\n\t\t<!-- PostgresQL -->\n\t\t<dependency>\n\t\t\t<groupId>org.postgresql</groupId>\n\t\t\t<artifactId>postgresql</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>com.snz1</groupId>\n\t\t\t<artifactId>jdbcrest</artifactId>\n\t\t\t<version>${jdbcrest.version}</version>\n\t\t\t<classifier>depends</classifier>\n\t\t\t<exclusions>\n\n\t\t\t\t<!-- PostgreSQL -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.postgresql</groupId>\n\t\t\t\t\t<artifactId>postgresql</artifactId>\n\t\t\t\t</exclusion>\n\n\t\t\t\t<!-- MySQL -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>mysql</groupId>\n\t\t\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t\t\t</exclusion>\n\n\t\t\t\t<!-- mariadb -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.mariadb.jdbc</groupId>\n\t\t\t\t\t<artifactId>mariadb-java-client</artifactId>\n\t\t\t\t</exclusion>\n\n\t\t\t\t<!-- DM8 -->\n\t\t\t\t<!-- https://mvnrepository.com/artifact/com.dameng/DmJdbcDriver18 -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>com.dameng</groupId>\n\t\t\t\t\t<artifactId>DmJdbcDriver18</artifactId>\n\t\t\t\t</exclusion>\n\n\t\t\t\t<!-- gBase9.5 -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>gbase</groupId>\n\t\t\t\t\t<artifactId>gbase-connector</artifactId>\n\t\t\t\t</exclusion>\n\n\t\t\t\t<!-- clickhouse -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>com.clickhouse</groupId>\n\t\t\t\t\t<artifactId>clickhouse-jdbc</artifactId>\n\t\t\t\t</exclusion>\n\n\t\t\t\t<!-- db2 -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>com.ibm.db2</groupId>\n\t\t\t\t\t<artifactId>jcc</artifactId>\n\t\t\t\t</exclusion>\n\n\t\t\t\t<!-- postgis -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>net.postgis</groupId>\n\t\t\t\t\t<artifactId>postgis-jdbc</artifactId>\n\t\t\t\t</exclusion>\n\n\t\t\t\t<!-- mssql -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>com.microsoft.sqlserver</groupId>\n\t\t\t\t\t<artifactId>mssql-jdbc</artifactId>\n\t\t\t\t</exclusion>\n\n\t\t\t\t<!-- trino -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>io.trino</groupId>\n\t\t\t\t\t<artifactId>trino-jdbc</artifactId>\n\t\t\t\t</exclusion>\n\n\t\t\t\t<!-- oracle -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>com.oracle.database.jdbc</groupId>\n\t\t\t\t\t<artifactId>ojdbc8</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>com.oracle.database.nls</groupId>\n\t\t\t\t\t<artifactId>orai18n</artifactId>\n\t\t\t\t</exclusion>\n\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>com.oracle.database.xml</groupId>\n\t\t\t\t\t<artifactId>xmlparserv2</artifactId>\n\t\t\t\t</exclusion>\n\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>com.oracle.database.xml</groupId>\n\t\t\t\t\t<artifactId>xdb6</artifactId>\n\t\t\t\t</exclusion>\n\n\t\t\t\t<!-- firebird -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.firebirdsql.jdbc</groupId>\n\t\t\t\t\t<artifactId>jaybird</artifactId>\n\t\t\t\t</exclusion>\n\n\t\t\t\t<!-- opensearch jdbc -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.opensearch.driver</groupId>\n\t\t\t\t\t<artifactId>opensearch-sql-jdbc</artifactId>\n\t\t\t\t</exclusion>\n\n\t\t\t\t<!-- taos jdbc -->\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>com.taosdata.jdbc</groupId>\n\t\t\t\t\t<artifactId>taos-jdbcdriver</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>api.gateway</groupId>\n\t\t\t<artifactId>sc-client-api</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>com.snz1</groupId>\n\t\t\t<artifactId>utility</artifactId>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>io.springfox</groupId>\n\t\t\t\t\t<artifactId>*</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\n\t</dependencies>\n\n\t<build>\n\t\t<finalName>{{ .Name }}</finalName>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-resources-plugin</artifactId>\n\t\t\t</plugin>\n\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>\n\t\t\t</plugin>\n\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-surefire-plugin</artifactId>\n\t\t\t</plugin>\n\n\t\t\t<!-- http://maven.apache.org/plugins/maven-jar-plugin -->\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.apache.maven.plugins</groupId>\n\t\t\t\t<artifactId>maven-jar-plugin</artifactId>\n\t\t\t\t<configuration>\n\t\t\t\t\t<excludes>\n\t\t\t\t\t\t<exclude>/*-dev.properties</exclude>\n\t\t\t\t\t\t<exclude>/*-test.properties</exclude>\n\t\t\t\t\t</excludes>\n\t\t\t\t</configuration>\n\t\t\t</plugin>\n\n\t\t</plugins>\n\t</build>\n\n\t<repositories>\n\t\t<repository>\n\t\t\t<id>central</id>\n\t\t\t<name>central</name>\n\t\t\t<url>https://repo1.maven.org/maven2/</url>\n\t\t\t<releases>\n\t\t\t</releases>\n\t\t\t<snapshots>\n\t\t\t\t<enabled>false</enabled>\n\t\t\t</snapshots>\n\t\t</repository>\n\t\t<repository>\n\t\t\t<id>{{ .MavenID }}</id>\n\t\t\t<name>{{ .MavenID }}</name>\n\t\t\t<url>{{ .MavenURL }}</url>\n\t\t\t<releases>\n\t\t\t</releases>\n\t\t\t<snapshots>\n\t\t\t</snapshots>\n\t\t</repository>\n\t</repositories>\n\n</project>\n"),
	}

	// define dirs
	dird := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1756132973, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			filee, // ".gitignore"
			filef, // ".java-version"
			filek, // "BUILD.yaml"
			filel, // "Dockerfile"
			filem, // "Jenkinsfile"
			filen, // "README.md"
			fileo, // "VERSION"
			filep, // "pom.xml"

		},
	}
	dirg := &embedded.EmbeddedDir{
		Filename:   ".workflow",
		DirModTime: time.Unix(1756132973, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			fileh, // ".workflow/build.sh"
			filei, // ".workflow/deploy.sh"
			filej, // ".workflow/publish.sh"

		},
	}

	// link ChildDirs
	dird.ChildDirs = []*embedded.EmbeddedDir{
		dirg, // ".workflow"

	}
	dirg.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`../asset/java`, &embedded.EmbeddedBox{
		Name: `../asset/java`,
		Time: time.Unix(1756132973, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"":          dird,
			".workflow": dirg,
		},
		Files: map[string]*embedded.EmbeddedFile{
			".gitignore":           filee,
			".java-version":        filef,
			".workflow/build.sh":   fileh,
			".workflow/deploy.sh":  filei,
			".workflow/publish.sh": filej,
			"BUILD.yaml":           filek,
			"Dockerfile":           filel,
			"Jenkinsfile":          filem,
			"README.md":            filen,
			"VERSION":              fileo,
			"pom.xml":              filep,
		},
	})
}

func init() {

	// define files
	files := &embedded.EmbeddedFile{
		Filename:    ".workflow/build.sh",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("#!/bin/bash\n\nOS=$(uname|tr '[:upper:]' '[:lower:]')\nHARDWARE=arm64\nif [ \"$(uname -m)\" == \"x86_64\" ]; then\n  HARDWARE=amd64\nfi\n\nWORKSPACE=${WORKSPACE:-$PWD}\n\ncd $WORKSPACE\n\n# Download ctl\nmkdir -p $WORKSPACE/.snz1dp/bin\nwget -O $WORKSPACE/.snz1dp/bin/snz1dpctl \\\n  {{ .DownloadURL }}snz1dpctl-$OS-$HARDWARE\nchmod +x $WORKSPACE/.snz1dp/bin/snz1dpctl\n\nexport SNZ1DP_HOME=$WORKSPACE/.snz1dp\nexport PATH=$PATH:$SNZ1DP_HOME/bin\n\nsnz1dpctl profile login {{ .ServerURL }} --username \"$DPCTL_USERNAME\" --password  \"$DPCTL_PASSWORD\"\nsnz1dpctl npm install\nsnz1dpctl make build\n"),
	}
	filet := &embedded.EmbeddedFile{
		Filename:    ".workflow/deploy.sh",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("#!/bin/bash\n\nWORKSPACE=${WORKSPACE:-$PWD}\nDEPLOY_NAMESPACE=${DEPLOY_NAMESPACE:-demo}\nPULL_IMAGE_SECRET=${PULL_IMAGE_SECRET:-pull-image-secret}\n\ncd $WORKSPACE\nexport SNZ1DP_HOME=$WORKSPACE/.snz1dp\nexport PATH=$PATH:$SNZ1DP_HOME/bin\n\nDEPLOY_RELEASE_NAME=$(snz1dpctl make info)\nCHART_NAME_VERSION=$(snz1dpctl make info --version)\n\n${WORKSPACE}/.snz1dp/bin/snz1dpctl helm template \\\n  -n ${DEPLOY_NAMESPACE} \\\n  --skip-tests \\\n  --set \"imagePullSecrets[0].name=${PULL_IMAGE_SECRET}\" \\\n  ${DEPLOY_RELEASE_NAME} \\\n  out/${CHART_NAME_VERSION}.tgz>${WORKSPACE}/deploy.yaml\n\nenvsubst < ${WORKSPACE}/deploy.yaml | kubectl -n ${DEPLOY_NAMESPACE} apply -f -\n"),
	}
	fileu := &embedded.EmbeddedFile{
		Filename:    ".workflow/publish.sh",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("#!/bin/bash\n\nWORKSPACE=${WORKSPACE:-$PWD}\ncd $WORKSPACE\nexport SNZ1DP_HOME=$WORKSPACE/.snz1dp\nexport PATH=$PATH:$SNZ1DP_HOME/bin\n\nsnz1dpctl make publish\n"),
	}
	filev := &embedded.EmbeddedFile{
		Filename:    "BUILD.yaml",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("# 编译类型\ntype: vue\n\n# 名称\nname: {{ .Name }}\n\n# 镜像编译参数\ndocker:\n  # 镜像名称\n  image: {{ .DockerHub }}{{ .Name }}\n  # 镜像编译文件(默认：Dockerfile)\n  file: Dockerfile\n\n# 服务定义\nservice:\n  # 端口定义\n  ports:\n  - 9301:80\n\n  # 环境变量\n  envs:\n  - TZ=Asia/Shanghai\n\n  # 心跳检查\n  healthcheck:\n    url: /health\n    interval: 10s\n    timeout: 10s\n    period: 30s\n    retries: 30\n\n  # 路由定义\n  ingress:\n  - backend-port: 80\n    strip-path: true\n    sso:\n    - {{ .BasePath }}\n"),
	}
	filew := &embedded.EmbeddedFile{
		Filename:    "Dockerfile",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("FROM {{ .DockerHub }}snz1dp/vueapp:2.0\n\nADD dist /app/html\n"),
	}
	filex := &embedded.EmbeddedFile{
		Filename:    "Jenkinsfile",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("pipeline {\n  agent {\n    node {\n      label \"maven\"\n    }\n  }\n  parameters {\n    string(name: 'REPO_SECRET', defaultValue: 'nexus-id', description: '发布仓库密钥')\n    string(name: 'K8S_SECRET', defaultValue: 'k8s-id', description: 'K8s部署密钥')\n    string(name: 'K8S_NAMESPACE', defaultValue: 'test', description: 'K8s部署名字空间/项目')\n    string(name: 'K8S_PULLIMAGE_SECRET', defaultValue: 'pull-image-secret', description: 'K8s拉取镜像密钥名称')\n  }\n  environment {\n    REPO_SECRET = \"${params.REPO_SECRET}\"\n    KUBECONFIG_CREDENTIAL_ID = \"${params.K8S_SECRET}\"\n    DEPLOY_NAMESPACE = \"${params.K8S_NAMESPACE}\"\n    PULL_IMAGE_SECRET = \"${params.K8S_PULLIMAGE_SECRET}\"\n  }\n  stages {\n    stage('Build') {\n      steps {\n        container ('maven') {\n          withCredentials([usernamePassword(passwordVariable: 'DPCTL_PASSWORD', usernameVariable: 'DPCTL_USERNAME' , credentialsId : \"$REPO_SECRET\" ,)]) {\n            sh 'chmod +x ${WORKSPACE}/.workflow/build.sh && ${WORKSPACE}/.workflow/build.sh'\n          }\n        }\n      }\n    }\n    stage('Publish') {\n      steps {\n        container ('maven') {\n          sh 'chmod +x ${WORKSPACE}/.workflow/publish.sh && ${WORKSPACE}/.workflow/publish.sh'\n        }\n      }\n    }\n    stage('Deploy') {\n      steps {\n        container ('maven') {\n          input(id: 'deploy-to-k8s', message: 'deploy-to-k8s?')\n          withCredentials([kubeconfigFile(credentialsId : \"$KUBECONFIG_CREDENTIAL_ID\" ,variable : \"KUBECONFIG\" ,)]) {\n            sh 'chmod +x ${WORKSPACE}/.workflow/deploy.sh && ${WORKSPACE}/.workflow/deploy.sh'\n          }\n        }\n      }\n    }\n  }\n}\n"),
	}
	filey := &embedded.EmbeddedFile{
		Filename:    "Makefile",
		FileModTime: time.Unix(1756132973, 0),

		Content: string(".PHONY: build\n\nexport SHELL:=/bin/bash\n\nOS := $(shell uname | awk '{print tolower($$0)}')\nROOT_DIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))\nSNZ1DPCTL_BIN = $(shell which snz1dpctl)\n\n# 显示信息\ndebug:\n\t@echo OS=$(OS)\n\t@echo ROOT_DIR=$(ROOT_DIR)\n\t@echo SNZ1DP_CTL=$(SNZ1DPCTL_BIN)\n\n# 初始化\ninit:\n\tsnz1dpctl npm i\n\n# 编译工程\nbuild:\n\tsnz1dpctl make build\n\n# 编译镜像\ndocker:\n\tsnz1dpctl make docker\n\n# 打包组件\npackage:\n\tsnz1dpctl make package\n\n# 发布组件\npublish:\n\tsnz1dpctl make publish\n\n# 启动命令运行模式\nrun:\n\tsnz1dpctl make run\n\n# 启动独立运行模式\nstart:\n\tsnz1dpctl make standalone\n\n# 停止独立运行模式\nstop:\n\tsnz1dpctl make standalone stop\n\n# 清理上下文内容\nclean:\n\t- rm -rf out\n\t- snz1dpctl make clean\n"),
	}
	filez := &embedded.EmbeddedFile{
		Filename:    "VERSION",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("{{ .Version }}"),
	}
	file11 := &embedded.EmbeddedFile{
		Filename:    "config/index.js",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("'use strict'\n// Template version: 1.3.1\n// see http://vuejs-templates.github.io/webpack for documentation.\n\nconst path = require('path')\n\n// TODO: 修改前端地址\nconst assetsPublicPath = '{{ .BasePath }}/'\n\nmodule.exports = {\n  dev: {\n\n    // Paths\n    assetsSubDirectory: 'static',\n    assetsPublicPath: assetsPublicPath,\n\n    // 跨域访问API代理配置\n    proxyTable: {\n      '{{ .ApiPath }}': {\n        target: '{{ .ApiBase }}',\n        changeOrigin: true,\n        pathRewrite: {\n          '^{{ .ApiPath }}': '{{ .ApiPath }}'\n        },\n        proxyTimeout: 18000000\n      },\n      '/xeai': {\n        target: 'http://localhost:8585',\n        changeOrigin: true,\n        pathRewrite: {\n          '^/xeai': '/xeai'\n        }\n      }\n    },\n\n    // TODO: 修改监听地址\n    host: '0.0.0.0', // can be overwritten by process.env.HOST\n    // TODO: 修改监听端口\n    port: 9301, // can be overwritten by process.env.PORT, if port is in use, a free one will be determined\n\n    autoOpenBrowser: false,\n    errorOverlay: true,\n    notifyOnErrors: true,\n    poll: false, // https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-\n\n    // Use Eslint Loader?\n    // If true, your code will be linted during bundling and\n    // linting errors and warnings will be shown in the console.\n    useEslint: true,\n    // If true, eslint errors and warnings will also be shown in the error overlay\n    // in the browser.\n    showEslintErrorsInOverlay: false,\n\n    /**\n     * Source Maps\n     */\n\n    // https://webpack.js.org/configuration/devtool/#development\n    devtool: 'cheap-module-eval-source-map',\n\n    // If you have problems debugging vue-files in devtools,\n    // set this to false - it *may* help\n    // https://vue-loader.vuejs.org/en/options.html#cachebusting\n    cacheBusting: true,\n\n    cssSourceMap: true\n  },\n\n  build: {\n    // Template for index.html\n    index: path.resolve(__dirname, '../dist/index.html'),\n\n    // Paths\n    assetsRoot: path.resolve(__dirname, '../dist'),\n    assetsSubDirectory: 'static',\n    assetsPublicPath: assetsPublicPath,\n\n    /**\n     * Source Maps\n     */\n\n    productionSourceMap: true,\n\n    // https://webpack.js.org/configuration/devtool/#production\n    devtool: '#source-map',\n\n    // Gzip off by default as many popular static hosts such as\n    // Surge or Netlify already gzip all static assets for you.\n    // Before setting to `true`, make sure to:\n    // npm install --save-dev compression-webpack-plugin\n    productionGzip: false,\n    productionGzipExtensions: ['js', 'css'],\n\n    // Run the build command with an extra argument to\n    // View the bundle analyzer report after build finishes:\n    // `npm run build --report`\n    // Set to `true` or `false` to always turn it on or off\n    bundleAnalyzerReport: process.env.npm_config_report\n  }\n}\n"),
	}
	file12 := &embedded.EmbeddedFile{
		Filename:    "config/prod.env.js",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("'use strict'\n\nconst path = require('path')\nconst fs = require('fs')\nconst packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '../', 'package.json')))\n\nmodule.exports = {\n  NODE_ENV: '\"production\"',\n  // TODO: 修改前端地址\n  BASE_URL: '\"{{ .BasePath }}\"',\n  // TODO: 修改后端地址\n  BASE_API: '\"{{ .ApiPath }}\"',\n  XEAI_API: '\"/xeai\"',\n  APP_CODE: '\"' + packageJson.name + '\"',\n  APP_VERSION: '\"' + packageJson.version + '\"',\n  APP_TITLE: '\"' + packageJson.description + '\"',\n}\n"),
	}
	file13 := &embedded.EmbeddedFile{
		Filename:    "package.json",
		FileModTime: time.Unix(1756132973, 0),

		Content: string("{\n  \"name\": \"{{ .Name }}\",\n  \"version\": \"{{ .Version }}\",\n  \"description\": \"TODO: 更改描述\",\n  \"author\": \"snz1\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\",\n    \"start\": \"npm run dev\",\n    \"lint\": \"eslint --ext .js,.vue src\",\n    \"build\": \"node build/build.js\"\n  },\n  \"dependencies\": {\n    \"@toast-ui/vue-editor\": \"^3.2.3\",\n    \"axios\": \"^0.19.2\",\n    \"babel-polyfill\": \"^6.26.0\",\n    \"base64-js\": \"^1.5.1\",\n    \"codemirror\": \"^6.0.1\",\n    \"default-passive-events\": \"^1.0.10\",\n    \"dropzone\": \"^6.0.0-beta.2\",\n    \"echarts\": \"^5.4.0\",\n    \"el-table-infinite-scroll\": \"^1.0.10\",\n    \"element-ui\": \"2.15.13\",\n    \"js-cookie\": \"^2.2.1\",\n    \"markdown-it\": \"^13.0.1\",\n    \"markdown-it-vue\": \"^1.1.7\",\n    \"moment\": \"^2.29.1\",\n    \"normalize.css\": \"^8.0.1\",\n    \"nprogress\": \"^0.2.0\",\n    \"path-to-regexp\": \"^6.2.0\",\n    \"qrcode\": \"^1.4.4\",\n    \"sortablejs\": \"^1.14.0\",\n    \"strict-array-equals\": \"^1.3.1\",\n    \"string-random\": \"^0.1.3\",\n    \"url-parse\": \"^1.5.10\",\n    \"vant\": \"^2.12.54\",\n    \"vue\": \"^2.6.12\",\n    \"vue-clipboard2\": \"^0.3.1\",\n    \"vue-codemirror\": \"^6.1.1\",\n    \"vue-count-to\": \"^1.0.13\",\n    \"vue-json-viewer\": \"^2.2.22\",\n    \"vue-router\": \"^3.5.1\",\n    \"vue-splitpane\": \"^1.0.6\",\n    \"vuedraggable\": \"^2.24.3\",\n    \"vuex\": \"^3.6.2\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer\": \"^7.1.2\",\n    \"babel-core\": \"^6.22.1\",\n    \"babel-eslint\": \"^8.2.1\",\n    \"babel-helper-vue-jsx-merge-props\": \"^2.0.3\",\n    \"babel-loader\": \"^7.1.1\",\n    \"babel-plugin-syntax-jsx\": \"^6.18.0\",\n    \"babel-plugin-transform-runtime\": \"^6.22.0\",\n    \"babel-plugin-transform-vue-jsx\": \"^3.5.0\",\n    \"babel-preset-env\": \"^1.3.2\",\n    \"babel-preset-stage-2\": \"^6.22.0\",\n    \"chalk\": \"^2.0.1\",\n    \"copy-webpack-plugin\": \"^4.0.1\",\n    \"css-loader\": \"^0.28.0\",\n    \"eslint\": \"^4.15.0\",\n    \"eslint-config-standard\": \"^10.2.1\",\n    \"eslint-friendly-formatter\": \"^3.0.0\",\n    \"eslint-loader\": \"^1.7.1\",\n    \"eslint-plugin-import\": \"^2.22.1\",\n    \"eslint-plugin-node\": \"^5.2.0\",\n    \"eslint-plugin-promise\": \"^3.4.0\",\n    \"eslint-plugin-standard\": \"^3.0.1\",\n    \"eslint-plugin-vue\": \"^4.0.0\",\n    \"extract-text-webpack-plugin\": \"^3.0.0\",\n    \"file-loader\": \"^1.1.4\",\n    \"friendly-errors-webpack-plugin\": \"^1.6.1\",\n    \"html-webpack-plugin\": \"^2.30.1\",\n    \"less\": \"^3.8.1\",\n    \"less-loader\": \"^5.0.0\",\n    \"mockjs\": \"^1.1.0\",\n    \"node-notifier\": \"^5.1.2\",\n    \"node-sass\": \"^4.14.1\",\n    \"optimize-css-assets-webpack-plugin\": \"^3.2.0\",\n    \"ora\": \"^1.2.0\",\n    \"portfinder\": \"^1.0.28\",\n    \"postcss-import\": \"^11.0.0\",\n    \"postcss-loader\": \"^2.0.8\",\n    \"postcss-url\": \"^7.2.1\",\n    \"rimraf\": \"^2.6.0\",\n    \"sass-loader\": \"^7.1.0\",\n    \"semver\": \"^5.3.0\",\n    \"shelljs\": \"^0.7.6\",\n    \"sortable.js\": \"^0.3.0\",\n    \"svg-sprite-loader\": \"^5.2.1\",\n    \"uglifyjs-webpack-plugin\": \"^1.1.1\",\n    \"url-loader\": \"^0.5.8\",\n    \"vue-loader\": \"^13.3.0\",\n    \"vue-markdown-loader\": \"^2.4.1\",\n    \"vue-style-loader\": \"^3.0.1\",\n    \"vue-template-compiler\": \"^2.6.12\",\n    \"webpack\": \"^3.6.0\",\n    \"webpack-bundle-analyzer\": \"^2.9.0\",\n    \"webpack-dev-server\": \"^2.9.1\",\n    \"webpack-merge\": \"^4.1.0\"\n  },\n  \"engines\": {\n    \"node\": \">= 6.0.0\",\n    \"npm\": \">= 3.0.0\"\n  },\n  \"browserslist\": [\n    \"> 1%\",\n    \"chrome >= 49\",\n    \"ie > 8\"\n  ]\n}\n"),
	}

	// define dirs
	dirq := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1756132973, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			filev,  // "BUILD.yaml"
			filew,  // "Dockerfile"
			filex,  // "Jenkinsfile"
			filey,  // "Makefile"
			filez,  // "VERSION"
			file13, // "package.json"

		},
	}
	dirr := &embedded.EmbeddedDir{
		Filename:   ".workflow",
		DirModTime: time.Unix(1756132973, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			files, // ".workflow/build.sh"
			filet, // ".workflow/deploy.sh"
			fileu, // ".workflow/publish.sh"

		},
	}
	dir10 := &embedded.EmbeddedDir{
		Filename:   "config",
		DirModTime: time.Unix(1756132973, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file11, // "config/index.js"
			file12, // "config/prod.env.js"

		},
	}

	// link ChildDirs
	dirq.ChildDirs = []*embedded.EmbeddedDir{
		dirr,  // ".workflow"
		dir10, // "config"

	}
	dirr.ChildDirs = []*embedded.EmbeddedDir{}
	dir10.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`../asset/vue`, &embedded.EmbeddedBox{
		Name: `../asset/vue`,
		Time: time.Unix(1756132973, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"":          dirq,
			".workflow": dirr,
			"config":    dir10,
		},
		Files: map[string]*embedded.EmbeddedFile{
			".workflow/build.sh":   files,
			".workflow/deploy.sh":  filet,
			".workflow/publish.sh": fileu,
			"BUILD.yaml":           filev,
			"Dockerfile":           filew,
			"Jenkinsfile":          filex,
			"Makefile":             filey,
			"VERSION":              filez,
			"config/index.js":      file11,
			"config/prod.env.js":   file12,
			"package.json":         file13,
		},
	})
}
